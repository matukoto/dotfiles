-- コメント操作プラグイン（Comment.nvim）の設定
require('Comment').setup({
  -- コメント記号と行の間にスペースを追加するかどうか
  -- 例: "-- コメント" vs "--コメント"
  padding = true,

  -- コメントトグル後にカーソル位置を維持するかどうか
  -- true: 位置を維持、false: コメント後の適切な位置に移動
  sticky = true,

  -- コメント操作時に無視する行のパターン
  -- nilの場合は全ての行を対象とする
  ignore = nil,

  -- ノーマルモードでのトグルキーマップ設定
  toggler = {
    -- 行コメントのトグルキーマップ
    -- 例: gcc で現在行のコメントをトグル
    line = 'gcc',
    
    -- ブロックコメントのトグルキーマップ
    -- 例: gbc でブロックコメントをトグル
    block = 'gbc',
  },

  -- ノーマル・ビジュアルモードでのオペレータ待機キーマップ
  opleader = {
    -- 行コメント用のキーマップ
    -- 例: gc[移動コマンド] で指定範囲を行コメント
    line = 'gc',
    
    -- ブロックコメント用のキーマップ
    -- 例: gb[移動コマンド] で指定範囲をブロックコメント
    block = 'gb',
  },

  -- 追加のキーマップ設定
  extra = {
    -- 上の行にコメントを追加
    -- 例: gcO で現在行の上にコメント行を追加
    above = 'gcO',
    
    -- 下の行にコメントを追加
    -- 例: gco で現在行の下にコメント行を追加
    below = 'gco',
    
    -- 行末にコメントを追加
    -- 例: gcA で現在行の末尾にコメントを追加
    eol = 'gcA',
  },

  -- キーマッピングの有効/無効設定
  -- falseを指定するとプラグインはキーマップを作成しない
  mappings = {
    -- 基本的なマッピング（gcc, gbc, gc[count]{motion}, gb[count]{motion}）
    basic = true,
    
    -- 追加のマッピング（gco, gcO, gcA）
    extra = true,
  },

  -- コメント操作前に実行する関数
  -- nilの場合は何も実行しない
  pre_hook = nil,

  -- コメント操作後に実行する関数
  -- nilの場合は何も実行しない
  post_hook = nil,
})
